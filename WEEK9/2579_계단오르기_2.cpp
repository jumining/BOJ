#include <iostream>
using namespace std;

int S[302]; //계단 최대 개수 300
int D[302][3]; //dp문제 풀 2차원 배열

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    
    //계단 개수 입력
    int N;
    cin >> N;
    
    //계단 점수 입력
    for(int i=1; i<=N; i++) {
        cin >> S[i];
    }
    
    //초기값
    //D[i][j] = j개의 계단 연속으로 밟고 현재 i번째 계단까지 밟았을 때 계단합의 최대
    D[1][1] = S[1]; //1개의 계단 연속으로 밟고 1번째 계단까지 밟았을 때 최댓값
    D[1][2] = 0;    //2개의 계단 연속으로 밟고 1번째 계단까지 밟았을 때 최댓값
    D[2][1] = S[2]; //1개의 계단 연속으로 밟고 2번째 계단까지 밟았을 때 최댓값
    D[2][2] = S[1] + S[2]; //2개의 계단 연속으로 밟고 2번째 계단까지 밟았을 때 최댓값
    
    //점화식, 최댓값 찾기
    for(int k=3; k<=N; k++) {
        D[k][1] = max(D[k-2][1],D[k-2][2]) + S[k];
        D[k][2] = D[k-1][1] + S[k];
    }
    
    //최댓값 출력
    cout << max(D[N][1], D[N][2]);
}

